<!DOCTYPE html>
<html> <head>
<title>Delayed WebRequest Demo</title>
<%= stylesheet_link_tag "application", :media => "all" %>
<%= javascript_include_tag "application" %>
<%= javascript_include_tag :defaults %>

<%= csrf_meta_tags %>
<script src="http://js.pusher.com/1.11/pusher.min.js"
        type="text/javascript"></script>

<script type="text/javascript">
<!--

//Browser-supporting code:

function AjaxObject(){
  var result;
  try{ //Gecko: Mozilla, Firefox; Webkit: Chrome, Safari; ?: Opera; (etc.?) browsers:
    result = new XMLHttpRequest();
  } catch (e){ //Internet Explorer browsers:
    try{
      result = new ActiveXObject('Msxml2.XMLHTTP');
    } catch (e) {
      try{
        result = new ActiveXObject('Microsoft.XMLHTTP');
      } catch (e){ //Something went wrong:
        alert('Unable to obtain an Ajax object.');
        return false;
      }
    }
  }
  return result;
}

//Other code:

// Enable pusher logging - don't include this in production
Pusher.log = function(message) {
  if (window.console && window.console.log) window.console.log(message);
};

// Flash fallback logging - don't include this in production
WEB_SOCKET_DEBUG = true;
var pusher = new Pusher('<%= Pusher.key %>'); // uses your API KEY
var channel = pusher.subscribe('test_channel');

channel.bind('greet', function(data) {
  alert(data.greeting);
  requestAjaxUpdate();
});

var newContent = "<ol><li>hello</li><li>there</li><li>in</li><li>Pusher land</li></ol>"

function targetIds() {
  return ["one", "two", "three", "four", "five"];
}

function Target(id) { //From string to property.
  this.id = id;
}

function selectTargets() {
  var targetIdsVar = targetIds();
  var len = targetIdsVar.length;
  var result = new Array(len);
  var each;
  for (var i = 0; i < len; i++) {
    each = targetIdsVar[i];
    result[i] = new Target(each);
  }
  result.push(new Target("junk")); //Temporary test.
  return result;
}

function alterTargets() {
  $('#one').css("color","yellow");
  var targets = selectTargets();
  var elem;
  var len = targets.length;
  for (var i = 0; i < len; i++) {
    elem = document.getElementById(targets[i].id);
    if (null === elem) continue;
    elem.innerHTML = newContent;
  }
}

function requestAjaxUpdate() {
  //jQuery.ajax ( '/ajax.json', 
  var r = new AjaxObject();
  //r.open('GET', 'http://localhost:5000/ajax',false);
  //r.open('GET', 'http://ajax-testbed-simple.herokuapp.com/ajax',false); //Synchronous.
  r.open('GET', '/ajax.json',false); //Synchronous.
  r.send();
  //alert(r.status);
  //alert(r.responseText);
  var p = JSON.parse(r.responseText);
  var s = p.message;
  //alert(s);
  newContent = s;
  alterTargets();
}

//function replaceOne() {
  //var becomes = 'new stuff';
  ////var a = jQuery('#one');
  //a.empty();
  //a.append(becomes);
//}

// When the DOM is fully loaded:
//jQuery(window.document).ready(function() {
window.document.addEventListener('DOMContentLoaded', function() {
  //alert('window.document ready (DOMContentLoaded)');
  //jQuery.get('/ajax.json', 'one', function(response) {
  //replaceOne();
  //alert(response);
}, false);

// When images, etc. are fully loaded:
//jQuery(window).load(function() {
window.onload = function() {
  //alert('window.onload');
  //alterTargets();
  //requestAjaxUpdate();
};

//-->
</script> </head> <body>

<p>From Rails.cache.read:<br /> &nbsp;
<%= @cached_foo %></p>

<div id="error"></div>

<div id="one">one-content</div>
<div id="two">two-content</div>
<div id="three">three-content</div>
<div id="four">four-content</div>
<div id="five">five-content</div>

<%# u = url_for '/ajax.json' %>
<%#= u %>

<%#= link_to 'Ajax update', {:controller => 'welcome', :action => 'ajax', :remote => true, :update => 'one'} %>
<%#= link_to 'Ajax update', u, { :update => { :success => 'one', :failure => 'error' }, :remote => true } %>
<%#= link_to 'Ajax update', u, :update => 'one', :remote => true  %>
<%#= link_to 'Ajax update', u, :update => 'one', :remote => true  %>
<%#= button_to 'Ajax update', u, :update => 'one', :remote => true  %>
<%#= button_to 'Ajax update', u, :update => '#one', :remote => true, :method => 'get'  %>

<!--
<a href="#">a</a>
-->

<%= yield %>

</body> </html>
